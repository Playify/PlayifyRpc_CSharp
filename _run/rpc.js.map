{"version":3,"file":"rpc.js","sources":["../src/connection/RpcId.ts","../src/internal/RegisteredTypes.ts","../src/types/functions/PendingCall.ts","../src/types/functions/FunctionCallContext.ts","../src/types/RemoteFunction.ts","../src/types/RpcError.ts","../src/types/RpcObject.ts","../src/types/data/DynamicData.ts","../src/types/data/DataOutput.ts","../src/connection/Connection.ts","../src/types/data/DataInput.ts","../src/connection/WebSocketConnection.ts","../src/connection/IdAndName.ts","../src/types/RpcProviderDecorator.ts","../src/types/data/CustomDynamicTypeDecorator.ts","../src/rpc.ts"],"sourcesContent":["\r\nexport const isNodeJs=globalThis?.process?.versions?.node!=null;\r\n\r\n//RpcId\r\nexport let RpcId: string;\r\nif(isNodeJs){\r\n\tRpcId=\"node@\"+(await import(\"os\")).hostname()+\"@\"+process.pid;\r\n}else if(\"document\" in globalThis) RpcId=\"web@\"+globalThis.document.location+\"@\"+Date.now().toString(36)+\"X\"+Math.random().toString(36).substring(2);\r\nelse throw new Error(\"Unknown Platform\");\r\n","import {isConnected} from \"../connection/WebSocketConnection\";\r\nimport {RpcId} from \"../connection/RpcId\";\r\nimport {callFunction} from \"../types/functions/FunctionCallContext\";\r\n\r\n\r\nexport type Func=(...args: any[])=>Promise<any>;\r\nexport type Invoker={[s:string]:Func|any};\r\nexport const registeredFunctions:Invoker=Object.create(null);\r\nexport const registeredTypes=new Map<string,Invoker>();\r\nregisteredTypes.set(\"$\"+RpcId,registeredFunctions);\r\n\r\n\r\nexport async function registerType(type: string,invoker: Invoker): Promise<void>{\r\n\tif(registeredTypes.has(type)) return;\r\n\tregisteredTypes.set(type,invoker);\r\n\r\n\tif(isConnected)\r\n\t\ttry{\r\n\t\t\tawait callFunction(null,'+',type);\r\n\t\t}catch(e){\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n}\r\nexport async function unregisterType(type:string): Promise<void>{\r\n\tif(!registeredTypes.has(type)) return;\r\n\tif(isConnected)\r\n\t\ttry{\r\n\t\t\tawait callFunction(null,'-',type);\r\n\t\t}catch(e){\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\tregisteredTypes.delete(type);\r\n}\r\n\r\n","import {FunctionCallContext} from \"./FunctionCallContext\";\r\n\r\ntype Action<T>=(t: T)=>void;\r\n\r\nexport class PendingCall<T=unknown> implements Promise<T>{\r\n\tpublic readonly [Symbol.toStringTag]: string=\"PendingCall\";\r\n\tpublic finished=false;\r\n\tpublic readonly promise: Promise<T>;\r\n\r\n\tconstructor(){\r\n\t\tthis.promise=new Promise((resolve,reject)=>{\r\n\t\t\tresolveCall.set(this as PendingCall,t=>{\r\n\t\t\t\tresolve(t);\r\n\t\t\t\tthis.finished=true\r\n\t\t\t});\r\n\t\t\trejectCall.set(this as PendingCall,e=>{\r\n\t\t\t\treject(e);\r\n\t\t\t\tthis.finished=true\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tcatch<TResult=never>(onrejected?: ((reason: any)=>(PromiseLike<TResult> | TResult)) | undefined | null): Promise<T | TResult>{\r\n\t\treturn this.promise.catch(onrejected);\r\n\t}\r\n\r\n\tfinally(onfinally?: (()=>void) | undefined | null): Promise<T>{\r\n\t\treturn this.promise.finally(onfinally);\r\n\t}\r\n\r\n\tthen<TResult1=T,TResult2=never>(onfulfilled?: ((value: T)=>(PromiseLike<TResult1> | TResult1)) | undefined | null,onrejected?: ((reason: any)=>(PromiseLike<TResult2> | TResult2)) | undefined | null): Promise<TResult1 | TResult2>{\r\n\t\treturn this.promise.then(onfulfilled,onrejected);\r\n\t}\r\n\r\n\t// noinspection JSUnusedLocalSymbols\r\n\tsendMessage(...args: any[]):PendingCall<T>{//overridden by callFunction and callLocal\r\n\t\treturn this;\r\n\t}\r\n\r\n\taddMessageListener<Args extends any[]=any[]>(func: (...args: Args)=>void):PendingCall<T>{\r\n\t\tregisterReceive(this,func as (...args: any[])=>void);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tcancel(){}//overridden by callFunction and callLocal\r\n\r\n\t[Symbol.asyncIterator](): AsyncIterator<any[]>{\r\n\t\treturn getAsyncIterator(this);\r\n\t}\r\n}\r\n\r\nexport function getAsyncIterator(call: PendingCall | FunctionCallContext): AsyncIterator<unknown[]>{\r\n\tlet pending:unknown[][]=[];\r\n\tlet requests:((tuple:[unknown[]]|undefined)=>void)[]=[];//undefined means finished\r\n\tlet finished=call.finished;\r\n\t\r\n\tcall.promise.finally(()=>{\r\n\t\tfinished=true;\r\n\t\tfor(let request of requests) request(undefined);\r\n\t});\r\n\tcall.addMessageListener((...args)=>pending.push(args));\r\n\t\r\n\treturn {\r\n\t\tasync next(): Promise<IteratorResult<unknown[]>>{\r\n\t\t\tif(finished||call.finished)return{done:true,value:undefined};\r\n\t\t\tif(pending.length)return {done:false,value:pending.shift()!};\r\n\t\t\t\r\n\t\t\tconst requestResult=await new Promise<[unknown[]]|undefined>(res=>requests.push(res));\r\n\t\t\tif(requestResult==null) return {done:true,value:undefined};\r\n\t\t\treturn {done:false,value:requestResult[0]};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const resolveCall=new WeakMap<PendingCall,Action<any>>();\r\nexport const rejectCall=new WeakMap<PendingCall,Action<Error>>();\r\nexport const pendingMap=new WeakMap<PendingCall | FunctionCallContext,(any[])[]>();\r\nexport const listenersMap=new WeakMap<PendingCall | FunctionCallContext,((...args: any[])=>void)[]>();\r\n\r\nexport function registerReceive(call: PendingCall | FunctionCallContext,func: (...args: any[])=>void){\r\n\tif(listenersMap.has(call)){\r\n\t\tlistenersMap.get(call)!.push(func);\r\n\t}else{\r\n\t\tlistenersMap.set(call,[func]);\r\n\t\tconst pendings=pendingMap.get(call)??[];\r\n\t\tfor(let pending of pendings){\r\n\t\t\ttry{\r\n\t\t\t\tfunc(...pending);\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.warn(\"Error receiving pending: \"+e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function runReceiveMessage(call: PendingCall | FunctionCallContext,args: any[]){\r\n\tif(call.finished) return;\r\n\r\n\tif(listenersMap.has(call)){\r\n\t\tfor(let func of listenersMap.get(call)!){\r\n\t\t\ttry{\r\n\t\t\t\tfunc(...args);\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.warn(\"Error receiving: \"+e);\r\n\t\t\t}\r\n\t\t}\r\n\t}else if(pendingMap.has(call)){\r\n\t\tpendingMap.set(call,[...pendingMap.get(call)!,args]);\r\n\t}else{\r\n\t\tpendingMap.set(call,[args]);\r\n\t}\r\n}","import {registeredTypes} from \"../../internal/RegisteredTypes\";\r\nimport {getAsyncIterator,PendingCall,registerReceive,rejectCall,resolveCall,runReceiveMessage} from \"./PendingCall\";\r\nimport {DataOutput} from \"../data/DataOutput\";\r\nimport {PacketType,sendCall,sendRaw} from \"../../connection/Connection\";\r\nimport {_webSocket,isConnected} from \"../../connection/WebSocketConnection\";\r\n\r\n\r\nlet currentContext: FunctionCallContext | null=null;\r\n\r\nexport function runWithContext<T>(func: ()=>T,context: FunctionCallContext): T{\r\n\tconst previous: FunctionCallContext | null=currentContext;\r\n\tcurrentContext=context;\r\n\ttry{\r\n\t\treturn func();\r\n\t}finally{\r\n\t\tcurrentContext=previous;\r\n\t}\r\n}\r\n\r\nexport function getFunctionContext(): FunctionCallContext{\r\n\tif(currentContext==null) throw new Error(\"FunctionCallContext not available\");\r\n\treturn currentContext;\r\n}\r\n\r\n\r\nlet nextId=0;\r\n\r\nexport function callFunction<T=unknown>(type: string | null,method: string,...args: any[]): PendingCall<T>{\r\n\tif(type!=null){\r\n\t\tconst local=registeredTypes.get(type);\r\n\t\tif(local) return callLocalFunction(type,method,()=>local[method](...args));\r\n\t}\r\n\r\n\tconst call=new PendingCall<T>();\r\n\r\n\tconst already: unknown[]=[];\r\n\tcall.finally(()=>{\r\n\t\t//TODO foreach(var d in already.OfType<Delegate>()) RemoteFunction.UnregisterFunction(d);\r\n\t});\r\n\r\n\tconst buff=new DataOutput();\r\n\tconst callId=nextId++;\r\n\ttry{\r\n\t\tbuff.writeByte(PacketType.FunctionCall);\r\n\t\tbuff.writeLength(callId);\r\n\t\tbuff.writeString(type);\r\n\t\tbuff.writeString(method);\r\n\t\tbuff.writeArray(args,d=>buff.writeDynamic(d,already));\r\n\t}catch(e){\r\n\t\trejectCall.get(call)?.(e as Error);\r\n\t\treturn call;\r\n\t}\r\n\r\n\tif(isConnected||(type==null&&_webSocket!=null)){\r\n\t\tcall.sendMessage=(...msgArgs)=>{\r\n\t\t\tif(call.finished) return call;\r\n\t\t\tconst msg=new DataOutput();\r\n\t\t\tmsg.writeByte(PacketType.MessageToExecutor);\r\n\t\t\tmsg.writeLength(callId);\r\n\t\t\tconst list: unknown[]=[];\r\n\t\t\tmsg.writeArray(msgArgs,d=>msg.writeDynamic(d,already));\r\n\t\t\talready.push(...list);\r\n\r\n\t\t\tsendRaw(msg);\r\n\t\t\treturn call;\r\n\t\t};\r\n\t\tcall.cancel=()=>{\r\n\t\t\tif(call.finished) return;\r\n\t\t\tconst msg=new DataOutput();\r\n\t\t\tmsg.writeByte(PacketType.FunctionCancel);\r\n\t\t\tmsg.writeLength(callId);\r\n\r\n\t\t\tsendRaw(msg);\r\n\t\t};\r\n\r\n\t\tsendCall(callId,call,buff);\r\n\t}else rejectCall.get(call)?.(new Error(\"Not connected\"));\r\n\r\n\treturn call;\r\n}\r\n\r\n\r\nexport function callLocal<T>(func:()=>(Promise<T>|T)): PendingCall<T>{\r\n\treturn callLocalFunction(null,null,func);\r\n}\r\n\r\nfunction callLocalFunction<T>(type: string|null,method: string|null,func:()=>(Promise<T>|T)){\r\n\tconst call=new PendingCall<T>();\r\n\r\n\tconst controller=new AbortController();\r\n\tconst context: FunctionCallContext={\r\n\t\ttype,\r\n\t\tmethod,\r\n\t\tsendMessage:(...sending)=>{\r\n\t\t\tcall.finished||runReceiveMessage(call,sending);\r\n\t\t\treturn context;\r\n\t\t},\r\n\t\tget finished(){return call.finished},\r\n\t\tpromise:call,\r\n\t\taddMessageListener:(func: (...args: any[])=>void)=>{\r\n\t\t\tregisterReceive(context,func);\r\n\t\t\treturn context;\r\n\t\t},\r\n\t\tcancelToken:controller.signal,\r\n\t\tcancel:()=>controller.abort(),\r\n\t\t[Symbol.asyncIterator]:()=>getAsyncIterator(context),\r\n\t};\r\n\tcall.sendMessage=(...received)=>{\r\n\t\tcall.finished||runReceiveMessage(context,received);\r\n\t\treturn call;\r\n\t};\r\n\tcall.cancel=()=>call.finished||context.cancel();\r\n\r\n\ttry{\r\n\t\tconst promise: Promise<T> | T=runWithContext(func,context);\r\n\r\n\t\tif(promise instanceof Promise) promise.then(t=>resolveCall.get(call)?.(t),e=>rejectCall.get(call)?.(e));\r\n\t\telse resolveCall.get(call)?.(promise);\r\n\t}catch(e){\r\n\t\trejectCall.get(call)?.(e as Error);\r\n\t}\r\n\treturn call;\r\n}\r\n\r\nexport interface FunctionCallContext{\r\n\treadonly type: string|null\r\n\treadonly method: string|null\r\n\treadonly finished: boolean\r\n\treadonly promise: Promise<unknown>\r\n\r\n\tsendMessage(...args: any[]): FunctionCallContext\r\n\r\n\taddMessageListener(func: (...args: any[])=>void): FunctionCallContext\r\n\r\n\tcancelToken: AbortSignal\r\n\r\n\tcancel(): void\r\n\r\n\t[Symbol.asyncIterator](): AsyncIterator<any[]>;\r\n}","import {RpcId} from \"../connection/RpcId\";\r\nimport {callFunction} from \"./functions/FunctionCallContext\";\r\nimport {PendingCall} from \"./functions/PendingCall\";\r\nimport {Func,registeredFunctions} from \"../internal/RegisteredTypes\";\r\n\r\n\r\n//TODO make remotefunction its own class\r\n\r\nexport type RemoteFunction<T extends ((...args:any)=>unknown) =(...args:any[])=>unknown>\r\n\t=T extends (...args: infer P)=>infer ReturnType?//if is function\r\n\t(((...args: P)=>(//function parameters stay the same\r\n\t\t\tReturnType extends Promise<infer PromiseType>?PendingCall<PromiseType>:PendingCall<ReturnType>//return type is always a PendingCall\r\n\t\t\t))\r\n\t\t//combine with RemoteFunction properties\r\n\t\t& {\r\n\t\ttype: string,\r\n\t\tmethod: string\r\n\t})\r\n\t: never;\r\n\r\n\r\nexport function isRemoteFunction(func: Func): func is RemoteFunction{\r\n\treturn \"type\" in func&&\"method\" in func;\r\n}\r\n\r\nexport function createRemoteFunction<T extends ((...args: any)=>any)>(type: string | null,method: string): RemoteFunction<T>{\r\n\treturn Object.freeze(Object.assign(\r\n\t\t((...params: any[])=>callFunction(type,method,...params)) as any,\r\n\t\t{\r\n\t\t\ttype:type,\r\n\t\t\tmethod,\r\n\t\t\ttoString:()=>{\r\n\t\t\t\treturn `rpc (...params) => ${type??\"null\"}.${method}(...params)`;\r\n\t\t\t}\r\n\t\t}\r\n\t));\r\n}\r\n\r\n\r\nlet nextId:number=Date.now();\r\nexport function registerFunction<T extends ((...args: any)=>any)>(func: T): RemoteFunction<T>{\r\n\tif(isRemoteFunction(func)) return func as unknown as RemoteFunction<T>;\r\n\tconst id=(nextId++).toString(16);\r\n\r\n\tregisteredFunctions[id]=func;\r\n\r\n\tconst type=\"$\"+RpcId;\r\n\treturn Object.assign(func as any,{//TODO functioncontext\r\n\t\ttype,\r\n\t\tmethod:id,\r\n\t\ttoString:()=>{\r\n\t\t\treturn `rpc (...params) => ${type??\"null\"}.${id}(...params)`;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport function unregisterFunction(func: RemoteFunction){\r\n\tif(!isRemoteFunction(func)) return;\r\n\tconst type=\"$\"+RpcId;\r\n\tif(func.type!=type) throw new Error(\"Can't unregister RemoteFunction, that was not registered locally\");\r\n\r\n\tconst registered=registeredFunctions[func.method] as RemoteFunction;\r\n\tdelete registeredFunctions[func.method];\r\n\t// @ts-ignore\r\n\tdelete registered.type;\r\n\t// @ts-ignore\r\n\tdelete registered.method;\r\n}","export class RpcError extends Error{\r\n\tpublic name: string;\r\n\tpublic from: string;\r\n\tpublic stackTrace: string;\r\n\r\n\tconstructor(type: string|null,from: string,message: string|null,stackTrace: string|Error|null|undefined){\r\n\t\tif(typeof stackTrace==\"string\"){\r\n\t\t\tsuper(message!);\r\n\t\t\tthis.stackTrace=stackTrace;\r\n\t\t}\r\n\t\telse if(stackTrace){\r\n\t\t\t// @ts-ignore\r\n\t\t\tsuper(message,{cause:stackTrace});\r\n\t\t\tthis.stackTrace=this.stack!.substring(this.stack!.indexOf('\\n')+1)+\"\\ncaused by: \"+stackTrace.stack;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// @ts-ignore\r\n\t\t\tsuper(message);\r\n\t\t\tthis.stackTrace=this.stack!.substring(this.stack!.indexOf('\\n')+1);\r\n\t\t}\r\n\t\tthis.name=type??\"UnknownRemoteError\";\r\n\t\tthis.from=from;\r\n\t\tthis.stack=this.name+\"(\"+from+\")\";\r\n\t\tif(message!=null) this.stack+=\": \"+message;\r\n\t\tif(stackTrace==null) return;\r\n\t\tthis.stack+=\"\\n\";\r\n\r\n\t\tthis.stackTrace=this.stackTrace.replaceAll(/^  +/gm,\"\\t\");\r\n\t\tthis.stack+=this.stackTrace;\r\n\t}\r\n}","import {createRemoteFunction,RemoteFunction} from \"./RemoteFunction\";\r\n\r\nexport const RpcObjectType=Symbol(\"RemoteObjectType\");\r\nexport type RpcObject<T=RpcObjectTemplate,Type=string>={\r\n\t[x in keyof T]:\r\n\tx extends \"then\" | symbol?\r\n\t\tT[x]:\r\n\t\tT[x] extends (...args: any[])=>unknown?\r\n\t\t\tRemoteFunction<T[x]>:\r\n\t\t\tRemoteFunction;\r\n} & {\r\n\t[RpcObjectType]: Type\r\n};\r\n\r\nexport type RpcObjectTemplate={\r\n\t[s: string]: (...args: any[])=>unknown\r\n}\r\n\r\n\r\nexport function createRpcObject<T extends object=RpcObjectTemplate,TypeString extends string | null=string>(type: TypeString,target: T=<T>{}): RpcObject<T,TypeString>{\r\n\tconst cache=new Map<string,RemoteFunction>();\r\n\treturn new Proxy<RpcObject<T,TypeString>>(<any>target,{\r\n\t\tget(_: never,p: string | symbol): any{\r\n\t\t\tif(p==RpcObjectType) return type;\r\n\t\t\tif(typeof p!=\"string\"||\r\n\t\t\t\tp==\"then\"//otherwise every RemoteObject would be thenable => would interfere with async await\r\n\t\t\t) return (<any>target)[p];\r\n\t\t\tif(cache.has(p)) return cache.get(p);\r\n\r\n\t\t\tconst func=createRemoteFunction(\r\n\t\t\t\ttype,\r\n\t\t\t\tp);\r\n\t\t\tcache.set(p,func);\r\n\t\t\treturn func;\r\n\t\t},\r\n\t\tconstruct(target: any,argArray: any[]): object{\r\n\t\t\treturn new target(...argArray);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n\r\nexport const RPC_ROOT=new Proxy({},{\r\n\tget:(_,prop)=>typeof prop==\"string\"?createRpcObject(prop):undefined,\r\n\thas:(_,prop)=>!(prop in globalThis)&&prop!=\"then\",\r\n}) as Record<string,RpcObject>;","import {DataInput} from \"./DataInput\";\r\nimport {createRpcObject,RpcObjectType} from \"../RpcObject\";\r\nimport {createRemoteFunction} from \"../RemoteFunction\";\r\nimport {DataOutput} from \"./DataOutput\";\r\n\r\nexport const writeRegistry: [id: string,check: (d: unknown)=>boolean,write: (data: DataOutput,o: unknown,already: unknown[])=>void][]=[];\r\nexport const readRegistry=new Map<string,(data: DataInput,already: unknown[])=>unknown>();\r\n\r\nexport function readDynamic(data: DataInput,already: unknown[]){\r\n\tlet objectId=data.readLength();\r\n\r\n\tif(objectId<0){\r\n\t\tobjectId= -objectId;\r\n\t\tswitch(objectId%4){\r\n\t\t\tcase 0:\r\n\t\t\t\treturn already[objectId/4];\r\n\t\t\tcase 1:\r\n\t\t\t\treturn new TextDecoder().decode(data.readBuffer((objectId-1)/4));\r\n\t\t\tcase 2:{\r\n\t\t\t\tconst o: Record<string,any>={};\r\n\t\t\t\talready.push(o);\r\n\t\t\t\tfor(let i=0; i<objectId/4; i++){\r\n\t\t\t\t\tconst key=data.readString();\r\n\t\t\t\t\to[key!]=readDynamic(data,already);\r\n\t\t\t\t}\r\n\t\t\t\treturn o;\r\n\t\t\t}\r\n\t\t\tcase 3:{\r\n\t\t\t\tconst o=new Array((objectId-3)/4);\r\n\t\t\t\talready.push(o);\r\n\t\t\t\tfor(let i=0; i<o.length; i++) o[i]=readDynamic(data,already);\r\n\t\t\t\treturn o;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"Unreachable code reached\");\r\n\t}else if(objectId>=128){\r\n\t\tconst type=new TextDecoder().decode(data.readBuffer(objectId-128));\r\n\t\tconst registryEntry=readRegistry.get(type);\r\n\t\tif(registryEntry)\r\n\t\t\treturn registryEntry(data,already);\r\n\t\tthrow new Error(\"Unknown data type: \"+type);\r\n\t}else{\r\n\t\tswitch(String.fromCodePoint(objectId)){\r\n\t\t\tcase 'n':\r\n\t\t\t\treturn null;\r\n\t\t\tcase 't':\r\n\t\t\t\treturn true;\r\n\t\t\tcase 'f':\r\n\t\t\t\treturn false;\r\n\t\t\tcase 'i':\r\n\t\t\t\treturn data.readInt();\r\n\t\t\tcase 'd':\r\n\t\t\t\treturn data.readDouble();\r\n\t\t\tcase 'l':\r\n\t\t\t\treturn data.readLong();\r\n\t\t\tcase 'b':\r\n\t\t\t\treturn data.readBuffer(data.readLength());\r\n\t\t\tcase 'D':\r\n\t\t\t\treturn new Date(Number(data.readLong()));\r\n\t\t\tcase 'R':{\r\n\t\t\t\tconst pattern=data.readString();\r\n\t\t\t\tconst flags=data.readByte();\r\n\r\n\t\t\t\treturn new RegExp(pattern!,\"g\"+\r\n\t\t\t\t\t((flags&1)?\"i\": \"\")+\r\n\t\t\t\t\t((flags&2)?\"m\": \"\")\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tcase 'E':\r\n\t\t\t\treturn data.readError();\r\n\t\t\tcase 'O':{\r\n\t\t\t\tconst type=data.readString();\r\n\t\t\t\treturn createRpcObject(type);\r\n\t\t\t}\r\n\t\t\tcase 'F':{\r\n\t\t\t\tconst type=data.readString();\r\n\t\t\t\tconst method=data.readString();\r\n\t\t\t\tif(method==null) throw new Error(\"InvalidOperation\");\r\n\t\t\t\treturn createRemoteFunction(type,method);\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unknown data type number: \"+objectId);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function writeDynamic(output: DataOutput,d: unknown,already: unknown[]){\r\n\tif(d==null) output.writeLength('n'.charCodeAt(0));\r\n\telse if(d===true) output.writeLength('t'.charCodeAt(0));\r\n\telse if(d===false) output.writeLength('f'.charCodeAt(0));\r\n\telse if(d=== +d){\r\n\t\toutput.writeLength('i'.charCodeAt(0));\r\n\t\toutput.writeInt(d);\r\n\t}else if(typeof d==\"number\"){\r\n\t\toutput.writeLength('d'.charCodeAt(0));\r\n\t\toutput.writeDouble(d);\r\n\t}else if(typeof d==\"bigint\"){\r\n\t\toutput.writeLength('l'.charCodeAt(0));\r\n\t\toutput.writeLong(d);\r\n\t}else if(d instanceof Uint8Array){\r\n\t\toutput.writeLength('b'.charCodeAt(0));\r\n\t\toutput.writeLength(d.length);\r\n\t\toutput.writeBuffer(d);\r\n\t}else if(d instanceof Date){\r\n\t\toutput.writeLength('D'.charCodeAt(0));\r\n\t\toutput.writeLong(+d);\r\n\t}else if(d instanceof RegExp){\r\n\t\toutput.writeLength('R'.charCodeAt(0));\r\n\t\toutput.writeString(d.source);\r\n\t\tconst flags=d.flags;\r\n\t\toutput.writeByte(\r\n\t\t\t(flags.includes(\"i\")?1: 0)||\r\n\t\t\t(flags.includes(\"m\")?2: 0)\r\n\t\t);\r\n\t}else if(d instanceof Error){\r\n\t\toutput.writeLength('E'.charCodeAt(0));\r\n\t\toutput.writeError(d);\r\n\t}else if((d as any)[RpcObjectType]!=null){//RpcObject\r\n\t\toutput.writeLength('O'.charCodeAt(0));\r\n\t\toutput.writeString((d as any)[RpcObjectType]);\r\n\t}else if(typeof d===\"function\"){//RpcFunction\r\n\t\toutput.writeLength('F'.charCodeAt(0));\r\n\t\toutput.writeFunction(d as any);\r\n\t}else if(already.includes(d)){\r\n\t\toutput.writeLength(-(already.indexOf(d)*4/* +0 */));\r\n\t}else if(typeof d===\"string\"){\r\n\t\tconst buffer=new TextEncoder().encode(d);\r\n\t\toutput.writeLength(-(buffer.length*4+1));\r\n\t\toutput.writeBytes(buffer);\r\n\t}/*else if(d instanceof DataTemplate){\r\n\t\td.writeDynamic(output,already);\r\n\t}*/ else if(Array.isArray(d)){\r\n\t\talready.push(d);\r\n\t\toutput.writeLength(-(d.length*4+3));\r\n\t\tfor(let element of d) writeDynamic(output,element,already);\r\n\t}else{\r\n\t\tfor(let [id,check,write] of writeRegistry){\r\n\t\t\tif(!check(d)) continue;\r\n\t\t\tconst idBytes=new TextEncoder().encode(id);\r\n\t\t\toutput.writeLength(idBytes.length+128);\r\n\t\t\toutput.writeBytes(idBytes);\r\n\t\t\twrite(output,d,already);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(typeof d===\"object\"){\r\n\t\t\talready.push(d);\r\n\t\t\tconst entries=Object.entries(d);\r\n\t\t\toutput.writeLength(-(entries.length*4+2));\r\n\t\t\tfor(let [key,value] of entries){\r\n\t\t\t\toutput.writeString(key);\r\n\t\t\t\twriteDynamic(output,value,already);\r\n\t\t\t}\r\n\t\t}else throw new Error(\"Unknown type for \"+d);\r\n\t}\r\n}","import {isRemoteFunction,registerFunction,RemoteFunction} from \"../RemoteFunction\";\r\nimport {RpcError} from \"../RpcError\";\r\nimport {RpcNameOrId} from \"../../connection/IdAndName\";\r\nimport {writeDynamic} from \"./DynamicData\";\r\n\r\nexport class DataOutput{\r\n\tprivate _buf: Uint8Array;\r\n\tprivate _data: DataView;\r\n\tprivate _count: number=0;\r\n\tpublic functions: RemoteFunction[]=[];\r\n\r\n\tconstructor(size:number|Uint8Array=32){\r\n\t\tthis._buf=typeof size===\"number\"?new Uint8Array(size):size;\r\n\t\tthis._data=new DataView(this._buf.buffer);\r\n\t}\r\n\r\n\tprivate ensureCapacity(additional: number){\r\n\t\tadditional+=this._count;\r\n\t\tif(additional>this._buf.byteLength){\r\n\t\t\tlet replacement=new Uint8Array(Math.max(this._buf.byteLength*2,additional));\r\n\t\t\tthis._data=new DataView(replacement.buffer);\r\n\r\n\t\t\treplacement.set(this._buf);\r\n\t\t\tthis._buf=replacement;\r\n\t\t}\r\n\t}\r\n\r\n\twriteByte(b: number): void{\r\n\t\tthis.ensureCapacity(1);\r\n\t\tthis._buf[this._count]=b;\r\n\t\tthis._count++;\r\n\t}\r\n\r\n\twriteBytes(b: ArrayLike<number>): void{\r\n\t\tthis.ensureCapacity(b.length);\r\n\t\tthis._buf.set(b,this._count);\r\n\t\tthis._count+=b.length;\r\n\t}\r\n\r\n\twriteBuffer(buf:Uint8Array):void{\r\n\t\tthis.writeBytes(buf);\r\n\t}\r\n\r\n\twriteBoolean(b: boolean): void{this.writeByte(b?1: 0);}\r\n\twriteNullBoolean(b: boolean|null): void{this.writeByte(b==null?2:b?1: 0);}\r\n\r\n\twriteShort(n: number): void{\r\n\t\tthis.ensureCapacity(2);\r\n\t\tthis._data.setInt16(this._count,n);\r\n\t\tthis._count+=2;\r\n\t}\r\n\r\n\twriteChar(c: string): void{this.writeShort(c.charCodeAt(0));}\r\n\r\n\twriteInt(n: number): void{\r\n\t\tthis.ensureCapacity(4);\r\n\t\tthis._data.setInt32(this._count,n);\r\n\t\tthis._count+=4;\r\n\t}\r\n\r\n\twriteLong(n: bigint|number): void{\r\n\t\tif(typeof n===\"number\"){\r\n\t\t\tthis.writeInt(n/(2**32));\r\n\t\t\tthis.writeInt(n%(2**32));\r\n\t\t}else{\r\n\t\t\tthis.writeInt(Number(n/BigInt(2**32)));\r\n\t\t\tthis.writeInt(Number(n%BigInt(2**32)));\r\n\t\t}\r\n\t}\r\n\r\n\twriteFloat(n: number): void{\r\n\t\tthis.ensureCapacity(4);\r\n\t\tthis._data.setFloat32(this._count,n);\r\n\t\tthis._count+=4;\r\n\t}\r\n\r\n\twriteDouble(n: number): void{\r\n\t\tthis.ensureCapacity(8);\r\n\t\tthis._data.setFloat64(this._count,n);\r\n\t\tthis._count+=8;\r\n\t}\r\n\r\n\twriteString(s: string|null){\r\n\t\tif(s==null){\r\n\t\t\tthis.writeLength(-1);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet array=new TextEncoder().encode(s);\r\n\t\tthis.writeLength(array.length);\r\n\t\tthis.writeBytes(array);\r\n\t}\r\n\r\n\twriteLength(i: number){\r\n\t\tlet u=(i<0?~i:i)>>>0;// \">>>0\" : convert to unsigned\r\n\t\twhile(u>=0x80){\r\n\t\t\tthis.writeByte(u|0x80);\r\n\t\t\tu>>=7;\r\n\t\t}\r\n\t\tif(i<0){\r\n\t\t\tthis.writeByte(u|0x80);\r\n\t\t\tthis.writeByte(0);\r\n\t\t}else{\r\n\t\t\tthis.writeByte(u);\r\n\t\t}\r\n\t}\r\n\r\n\twriteByteArray(arr: ArrayLike<number>|null){\r\n\t\tif(!arr) this.writeLength(-1);\r\n\t\telse{\r\n\t\t\tthis.writeLength(arr.length);\r\n\t\t\tthis.writeBytes(arr);\r\n\t\t}\r\n\t}\r\n\twriteArray<T>(arr: ArrayLike<T>|null,writeFunction: (t: T)=>void){\r\n\t\tif(!arr) this.writeLength(-1);\r\n\t\telse{\r\n\t\t\tthis.writeLength(arr.length);\r\n\t\t\tfor(let i=0; i<arr.length; i++)\r\n\t\t\t\twriteFunction.call(this,arr[i]!);\r\n\t\t}\r\n\t}\r\n\r\n\ttoBuffer(from=0): Uint8Array{\r\n\t\treturn this._buf.slice(from,this._count-from);\r\n\t}\r\n\t\r\n\twriteFunction(rf:RemoteFunction){\r\n\t\tif(!isRemoteFunction(rf)){\r\n\t\t\trf=registerFunction(rf);\r\n\t\t\tthis.functions.push(rf);\r\n\t\t}\r\n\t\t\r\n\t\tthis.writeString(rf.type);\r\n\t\tthis.writeString(rf.method);\r\n\t}\r\n\r\n\twriteError(error: Error){\r\n\t\tconst remote=error instanceof RpcError?\r\n\t\t\terror:\r\n\t\t\tnew RpcError(error.name,RpcNameOrId,error.message,error.stack!);\r\n\t\tthis.writeString(remote.name);\r\n\t\tthis.writeString(remote.from);\r\n\t\tthis.writeString(remote.message);\r\n\t\tthis.writeString(remote.stackTrace);\r\n\t}\r\n\t/*writeError(error: Error){\r\n\t\tconst remote=error instanceof RemoteError?\r\n\t\t\terror:\r\n\t\t\tnew UserRemoteError(error);\r\n\t\tremote.writeError(this);\r\n\t}*/\r\n\t\r\n\twriteObject(o:Record<string,any>,already:unknown[]){\r\n\t\talready.push(o);\r\n\t\tfor(const key in o){\r\n\t\t\tthis.writeString(key);\r\n\t\t\tthis.writeDynamic(o[key],already);\r\n\t\t}\r\n\t\tthis.writeString(null);\r\n\t}\r\n\r\n\twriteDynamic(value: any,already: unknown[]=[]){\r\n\t\twriteDynamic(this,value,already);\r\n\t}\r\n}\r\n","// noinspection ExceptionCaughtLocallyJS\r\n\r\nimport {_webSocket} from \"./WebSocketConnection\";\r\nimport {RpcNameOrId} from \"./IdAndName\";\r\nimport {DataOutput} from \"../types/data/DataOutput\";\r\nimport {DataInput} from \"../types/data/DataInput\";\r\nimport {\r\n\tgetAsyncIterator,\r\n\tPendingCall,\r\n\tregisterReceive,\r\n\trejectCall,\r\n\tresolveCall,\r\n\trunReceiveMessage\r\n} from \"../types/functions/PendingCall\";\r\nimport {registeredTypes} from \"../internal/RegisteredTypes\";\r\nimport {FunctionCallContext,runWithContext} from \"../types/functions/FunctionCallContext\";\r\nimport {RpcError} from \"../types/RpcError\";\r\n\r\n\r\nconst activeRequests=new Map<number,PendingCall>();\r\nconst currentlyExecuting=new Map<number,FunctionCallContext>();\r\n\r\nexport function disposeConnection(e: Error){\r\n\tfor(let pending of activeRequests.values()) rejectCall.get(pending)?.(e);\r\n\tactiveRequests.clear();\r\n\r\n\tfor(let ctx of currentlyExecuting.values()) ctx.cancel();\r\n}\r\n\r\nexport function sendRaw(buff: DataOutput){\r\n\tif(_webSocket==null) throw new Error(\"Not connected\");\r\n\t_webSocket.send(buff.toBuffer());\r\n}\r\n\r\nexport function sendCall(callId: number,call: PendingCall,buff: DataOutput){\r\n\tactiveRequests.set(callId,call);\r\n\ttry{\r\n\t\tsendRaw(buff);\r\n\t}catch(e){\r\n\t\trejectCall.get(call)?.(e as Error);\r\n\t}\r\n}\r\n\r\nexport enum PacketType{\r\n\tFunctionCall=0,\r\n\tFunctionSuccess=1,\r\n\tFunctionError=2,\r\n\tFunctionCancel=3,\r\n\tMessageToExecutor=4,\r\n\tMessageToCaller=5,\r\n}\r\n\r\n//TODO move this to RemoteError.ts?\r\n//receiving FunctionError results in an Uncaught in promise warning, that doesn't make sense, therefore it gets blocked here\r\nlet ignoreUnhandledRejections=false;\r\nif(globalThis.process) process.on(\"unhandledRejection\",()=>{\r\n\tignoreUnhandledRejections=false;\r\n});\r\nelse window.addEventListener(\"unhandledrejection\",e=>{\r\n\tif(ignoreUnhandledRejections&&e.reason instanceof RpcError){\r\n\t\tignoreUnhandledRejections=false;\r\n\t\te.preventDefault();\r\n\t}\r\n});\r\n\r\nexport async function receiveRpc(data: DataInput){\r\n\ttry{\r\n\t\tconst packetType=data.readByte() as PacketType;\r\n\r\n\t\tswitch(packetType){\r\n\t\t\tcase PacketType.FunctionCall:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\r\n\r\n\t\t\t\tconst already: unknown[]=[];\r\n\r\n\t\t\t\tlet finished: boolean=false;\r\n\t\t\t\tlet resolve: (t: unknown)=>void=null!;\r\n\t\t\t\tlet reject: (e: Error)=>void=null!;\r\n\r\n\t\t\t\tconst promise=new Promise((res,rej)=>{\r\n\t\t\t\t\tresolve=t=>{\r\n\t\t\t\t\t\tres(t);\r\n\t\t\t\t\t\tfinished=true;\r\n\r\n\t\t\t\t\t\tconst buff=new DataOutput();\r\n\t\t\t\t\t\tbuff.writeByte(PacketType.FunctionSuccess);\r\n\t\t\t\t\t\tbuff.writeLength(callId);\r\n\t\t\t\t\t\tbuff.writeDynamic(t);\r\n\t\t\t\t\t\tsendRaw(buff);\r\n\t\t\t\t\t\tcurrentlyExecuting.delete(callId);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//TODO foreach(var d in already.OfType<Delegate>()) RemoteFunction.UnregisterFunction(d);\r\n\t\t\t\t\t};\r\n\t\t\t\t\treject=e=>{\r\n\t\t\t\t\t\trej(e);\r\n\t\t\t\t\t\tfinished=true;\r\n\r\n\t\t\t\t\t\tconst buff=new DataOutput();\r\n\t\t\t\t\t\tbuff.writeByte(PacketType.FunctionError);\r\n\t\t\t\t\t\tbuff.writeLength(callId);\r\n\t\t\t\t\t\tbuff.writeError(e);\r\n\t\t\t\t\t\tsendRaw(buff);\r\n\t\t\t\t\t\tcurrentlyExecuting.delete(callId);\r\n\r\n\t\t\t\t\t\t//TODO foreach(var d in already.OfType<Delegate>()) RemoteFunction.UnregisterFunction(d);\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\ttry{\r\n\t\t\t\t\tconst type=data.readString();\r\n\r\n\t\t\t\t\tif(type==null) throw new Error(\"Client can't use null as a type for function calls\");\r\n\t\t\t\t\tconst local=registeredTypes.get(type);\r\n\t\t\t\t\tif(!local) throw new Error(`Type \"${type}\" is not registered on client ${RpcNameOrId}`);\r\n\r\n\t\t\t\t\tconst method=data.readString()!;\r\n\r\n\t\t\t\t\tconst args=data.readArray(()=>data.readDynamic(already))??[];\r\n\r\n\r\n\t\t\t\t\tconst controller=new AbortController();\r\n\t\t\t\t\tconst context: FunctionCallContext={\r\n\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\tmethod,\r\n\t\t\t\t\t\tget finished(){\r\n\t\t\t\t\t\t\treturn finished;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tpromise,\r\n\t\t\t\t\t\tsendMessage(...sending){\r\n\t\t\t\t\t\t\tif(finished) return context;\r\n\t\t\t\t\t\t\tconst msg=new DataOutput();\r\n\t\t\t\t\t\t\tmsg.writeByte(PacketType.MessageToCaller);\r\n\t\t\t\t\t\t\tmsg.writeLength(callId);\r\n\t\t\t\t\t\t\tconst list: unknown[]=[];\r\n\t\t\t\t\t\t\tmsg.writeArray(sending,d=>msg.writeDynamic(d,list));\r\n\t\t\t\t\t\t\talready.push(...list);\r\n\r\n\t\t\t\t\t\t\tsendRaw(msg);\r\n\t\t\t\t\t\t\treturn context;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\taddMessageListener(func: (...args: any[])=>void){\r\n\t\t\t\t\t\t\tregisterReceive(context,func);\r\n\t\t\t\t\t\t\treturn context;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcancelToken:controller.signal,\r\n\t\t\t\t\t\tcancel:()=>controller.abort(),\r\n\t\t\t\t\t\t[Symbol.asyncIterator]:()=>getAsyncIterator(context),\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcurrentlyExecuting.set(callId,context);\r\n\r\n\r\n\t\t\t\t\tconst result: Promise<any> | any=runWithContext(()=>{\r\n\t\t\t\t\t\tconst func=local[method];\r\n\t\t\t\t\t\tif(func==null) throw new Error(`Method \\\"${method}\\\" not found in \\\"${type}\\\"`);\r\n\t\t\t\t\t\treturn func.call(local,...args);\r\n\t\t\t\t\t},context);\r\n\r\n\t\t\t\t\tif(result instanceof Promise) result.then(r=>resolve(r),e=>reject(e));\r\n\t\t\t\t\telse resolve(result);\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\treject(e as Error);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.FunctionSuccess:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\r\n\t\t\t\tconst pending=activeRequests.get(callId);\r\n\t\t\t\tif(pending==null){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no activeRequest with id: ${callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ttry{\r\n\t\t\t\t\tresolveCall.get(pending)?.(data.readDynamic());\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\trejectCall.get(pending)?.(e as Error);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.FunctionError:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\r\n\t\t\t\tconst pending=activeRequests.get(callId);\r\n\t\t\t\tif(pending==null){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no activeRequest with id: ${callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry{\r\n\t\t\t\t\tignoreUnhandledRejections=true;\r\n\t\t\t\t\trejectCall.get(pending)?.(await data.readError());\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\trejectCall.get(pending)?.(e as Error);\r\n\t\t\t\t}finally{\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.FunctionCancel:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\t\t\t\tlet ctx=currentlyExecuting.get(callId);\r\n\t\t\t\tif(!ctx){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no CurrentlyExecuting with id: {callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tctx.cancel();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.MessageToExecutor:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\t\t\t\tlet ctx=currentlyExecuting.get(callId);\r\n\t\t\t\tif(!ctx){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no CurrentlyExecuting with id: {callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tconst already: unknown[]=[];\r\n\t\t\t\tconst args=data.readArray(()=>data.readDynamic(already))??[];\r\n\t\t\t\trunReceiveMessage(ctx,args);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.MessageToCaller:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\t\t\t\tlet pending=activeRequests.get(callId);\r\n\t\t\t\tif(!pending){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no ActiveRequest with id: {callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tconst already: unknown[]=[];\r\n\t\t\t\tconst args=data.readArray(()=>data.readDynamic(already))??[];\r\n\r\n\t\t\t\trunReceiveMessage(pending,args);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}catch(e){\r\n\t\tconsole.error(e);\r\n\t}\r\n}","import {createRemoteFunction,RemoteFunction} from \"../RemoteFunction\";\r\nimport {RpcError} from \"../RpcError\";\r\nimport {readDynamic} from \"./DynamicData\";\r\n\r\n\r\nexport class DataInput{\r\n\tprivate readonly _buf: Uint8Array;\r\n\tprivate readonly _data: DataView;\r\n\tprivate _pos: number;\r\n\tprivate readonly _count: number;\r\n\r\n\tconstructor(buf: Uint8Array);\r\n\tconstructor(buf: Uint8Array,pos: number,length: number);\r\n\tconstructor(buf: Uint8Array,pos: number=0,length: number=buf.length){\r\n\t\tthis._buf=buf;\r\n\t\tthis._data=new DataView(buf.buffer);\r\n\t\tthis._pos=pos;\r\n\t\tthis._count=pos+length;\r\n\t}\r\n\r\n\treadFully(b: number[],off: number=0,len: number=b.length): void{\r\n\t\tlet pos=this._pos;\r\n\t\tconst available=this._count-pos;\r\n\r\n\t\tif(available<len) throw new RangeError(\"not enough bytes available to use readFully\");\r\n\r\n\t\tfor(let i=off; i<off+len; i++)\r\n\t\t\tb[i]=this._buf[pos++]!;\r\n\t\tthis._pos=pos;\r\n\t}\r\n\r\n\tskip(n: number): number{\r\n\t\tlet k=this.available();\r\n\t\tif(n<k) k=n<0?0: n;\r\n\t\tthis._pos+=k;\r\n\t\treturn k;\r\n\t}\r\n\r\n\tavailable(): number{\r\n\t\treturn this._count-this._pos;\r\n\t}\r\n\r\n\treadAll(): Uint8Array{\r\n\t\treturn this._buf.slice(this._pos,this._pos=this._count);\r\n\t}\r\n\r\n\treadBuffer(length: number): Uint8Array{\r\n\t\tif(length>this.available()) throw new RangeError();\r\n\t\treturn this._buf.slice(this._pos,this._pos+=length);\r\n\t}\r\n\r\n\treadByte(): number{\r\n\t\treturn this._data.getUint8(this._pos++);\r\n\t}\r\n\r\n\treadBoolean(): boolean{\r\n\t\treturn this.readByte()!=0;\r\n\t}\r\n\r\n\treadNullBoolean(): boolean | null{\r\n\t\tconst b=this.readByte();\r\n\t\treturn b<2?b==1: null;\r\n\t}\r\n\r\n\treadShort(): number{\r\n\t\tconst n=this._data.getInt16(this._pos);\r\n\t\tthis._pos+=2;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadUShort(): number{\r\n\t\tconst n=this._data.getUint16(this._pos);\r\n\t\tthis._pos+=2;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadChar(): string{\r\n\t\treturn String.fromCharCode(this.readUShort());\r\n\t}\r\n\r\n\treadInt(): number{\r\n\t\tconst n=this._data.getInt32(this._pos);\r\n\t\tthis._pos+=4;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadLong(): bigint{\r\n\t\treturn BigInt(this.readInt())*BigInt(2**32)+BigInt(this.readInt()>>>0);\r\n\t}\r\n\r\n\treadFloat(): number{\r\n\t\tconst n=this._data.getFloat32(this._pos);\r\n\t\tthis._pos+=4;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadDouble(): number{\r\n\t\tconst n=this._data.getFloat64(this._pos);\r\n\t\tthis._pos+=8;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadString(): string|null{\r\n\t\tlet length=this.readLength();\r\n\t\tif(length== -1) return null;\r\n\t\treturn new TextDecoder().decode(this.readBuffer(length));\r\n\t}\r\n\r\n\treadLength(): number{\r\n\t\tlet result=0;\r\n\t\tlet push=0;\r\n\t\twhile(true){\r\n\t\t\tconst read=this.readByte();\r\n\t\t\tif(read==0) return push==0?0: ~result;\r\n\t\t\tif((read&0x80)==0){\r\n\t\t\t\tresult|=read<<push;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\tresult|=(read&0x7f)<<push;\r\n\t\t\tpush+=7;\r\n\t\t}\r\n\t}\r\n\r\n\treadArray<T>(readFunction: ()=>T): T[]|null{\r\n\t\tconst length=this.readLength();\r\n\t\tif(length== -1) return null;\r\n\t\tconst arr: T[]=[];\r\n\t\tfor(let i=0; i<length; i++)\r\n\t\t\tarr[i]=readFunction.call(this);\r\n\t\treturn arr;\r\n\t}\r\n\r\n\treadFunction():RemoteFunction{\r\n\t\treturn createRemoteFunction(this.readString()!,this.readString()!);\r\n\t}\r\n\r\n\treadError(){\r\n\t\treturn new RpcError(this.readString(),this.readString()??\"???\",this.readString(),this.readString());\r\n\t\t//return RemoteError.readError(this);\r\n\t}\r\n\r\n\treadObject(already: unknown[]): Record<string,any>{\r\n\t\tconst o: Record<string,any>={};\r\n\t\talready.push(o);\r\n\t\tfor(let s=this.readString(); s!=null; s=this.readString())\r\n\t\t\to[s]=this.readDynamic(already);\r\n\t\treturn o;\r\n\t}\r\n\r\n\treadDynamic(already: unknown[]=[]){\r\n\t\treturn readDynamic(this,already);\r\n\t}\r\n}","import {RpcNameOrId} from \"./IdAndName\";\r\nimport {disposeConnection,receiveRpc} from \"./Connection\";\r\nimport {DataInput} from \"../types/data/DataInput\";\r\nimport {callFunction} from \"../types/functions/FunctionCallContext\";\r\nimport {registeredTypes} from \"../internal/RegisteredTypes\";\r\nimport {isNodeJs} from \"./RpcId\";\r\n\r\n\r\nexport let isConnected=false;\r\n\r\n\r\nlet resolveWaitUntilConnected: VoidFunction,rejectWaitUntilConnected: (e: Error)=>void;\r\nlet waitUntilConnectedAttempt=new Promise<void>((res,rej)=>[resolveWaitUntilConnected,rejectWaitUntilConnected]=[res,rej]);\r\n\r\nexport async function waitConnected(){\r\n\twhile(true)\r\n\t\tif(await waitUntilConnectedAttempt.then(()=>true,()=>false))\r\n\t\t\treturn;\r\n}\r\n\r\n\r\nlet createWebSocket: ()=>WebSocket;\r\nif(isNodeJs){\r\n\tconst WebSocket=(await import(\"ws\")).WebSocket;\r\n\tcreateWebSocket=()=>new WebSocket(process.env.RPC_URL!,{\r\n\t\theaders:{\r\n\t\t\tCookie:\"token=\"+process.env.RPC_TOKEN\r\n\t\t}\r\n\t}) as unknown as WebSocket\r\n}else if(\"document\" in globalThis){\r\n\tcreateWebSocket=()=>new WebSocket(\"ws\"+globalThis.document.location.origin.substring(4)+\"/rpc\");\r\n}else throw new Error(\"Unknown Platform\");\r\n\r\n\r\nfunction closeRpc(e: Error){\r\n\tconst reject=rejectWaitUntilConnected;\r\n\twaitUntilConnectedAttempt=new Promise<void>((res,rej)=>[resolveWaitUntilConnected,rejectWaitUntilConnected]=[res,rej]);\r\n\treject(e);\r\n\r\n\tdisposeConnection(e);\r\n}\r\n\r\n\r\n//connect\r\n\r\nexport let _webSocket: WebSocket | null=null;\r\n(function reconnect(){\r\n\tconst webSocket=createWebSocket();\r\n\r\n\twebSocket.onclose=()=>{\r\n\t\t_webSocket=null;\r\n\t\tisConnected=false;\r\n\t\tconsole.log(\"Websocket disconnected\");\r\n\t\tconst e=new Error(\"Connection closed\");\r\n\t\tcloseRpc(e);\r\n\t\tsetTimeout(reconnect,1000);\r\n\t};\r\n\twebSocket.onopen=async()=>{\r\n\t\tconsole.log(\"Websocket connected\");\r\n\r\n\t\ttry{\r\n\t\t\t_webSocket=webSocket;\r\n\r\n\t\t\tawait callFunction(null,'N',RpcNameOrId);\r\n\t\t\tawait callFunction(null,'+',...registeredTypes.keys());\r\n\r\n\t\t\tisConnected=true;\r\n\t\t\tresolveWaitUntilConnected();\r\n\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t}catch(e: Error){\r\n\t\t\tconsole.error(e.stack);\r\n\t\t\tcloseRpc(e);\r\n\r\n\t\t\twebSocket?.close(4000,\"Error registering types\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\twebSocket.binaryType=\"arraybuffer\";\r\n\twebSocket.onmessage=function onMessage(e: MessageEvent){\r\n\t\tconst data=e.data;\r\n\r\n\t\tif(typeof data==\"string\"){\r\n\t\t\tconsole.log(data);\r\n\t\t}else{\r\n\t\t\t// noinspection JSIgnoredPromiseFromCall\r\n\t\t\treceiveRpc(new DataInput(new Uint8Array(data)));\r\n\t\t}\r\n\t};\r\n}());\r\n","import {isConnected} from \"./WebSocketConnection\";\r\nimport {callFunction} from \"../types/functions/FunctionCallContext\";\r\nimport {RpcId} from \"./RpcId\";\r\n\r\n\r\nlet _name:string|null;\r\nexport let RpcNameOrId=RpcId;\r\n\r\nexport async function setName(name:string|null){\r\n\t_name=name;\r\n\tRpcNameOrId=_name!=null?`${_name} (${RpcId})`: RpcId;\r\n\ttry{\r\n\t\tif(isConnected) await callFunction(null,'N',RpcNameOrId);\r\n\t}catch(e){\r\n\t\tconsole.error(e);\r\n\t}\r\n}","import {registerType} from \"../internal/RegisteredTypes\";\r\n\r\nexport function RpcProvider(type?: string){\r\n\treturn function(target: any){\r\n\t\tregisterType(type??target.prototype.constructor.name,target).catch(console.error);\r\n\t};\r\n}\r\n","import {DataOutput} from \"./DataOutput\";\r\nimport {DataInput} from \"./DataInput\";\r\nimport {readRegistry,writeRegistry} from \"./DynamicData\";\r\n\r\n\r\ninterface CustomDynamicTypeInstance{\r\n\twrite(outgoing:DataOutput,already:unknown[]):void;\r\n}\r\n\r\ninterface CustomDynamicType<T extends CustomDynamicTypeInstance>{\r\n\tnew(...arg: any[]):T;\r\n\tread(incoming:DataInput,already:unknown[]):CustomDynamicTypeInstance;\r\n}\r\n\r\nexport function CustomDynamicType(id: string){\r\n\treturn function<T extends CustomDynamicTypeInstance>(target: CustomDynamicType<T>){\r\n\t\twriteRegistry.push([id,d=>d instanceof target,(data,o,already)=>(o as T).write(data,already)]);\r\n\t\treadRegistry.set(id,(data,already)=>target.read(data,already));\r\n\t};\r\n}","import {RpcNameOrId,setName} from \"./connection/IdAndName\";\r\nimport {isConnected,waitConnected} from \"./connection/WebSocketConnection\";\r\nimport {createRpcObject,RPC_ROOT} from \"./types/RpcObject\";\r\nimport {createRemoteFunction,registerFunction,unregisterFunction} from \"./types/RemoteFunction\";\r\nimport {callFunction,callLocal,FunctionCallContext,getFunctionContext} from \"./types/functions/FunctionCallContext\";\r\nimport {registerType,unregisterType} from \"./internal/RegisteredTypes\";\r\nimport {RpcId} from \"./connection/RpcId\";\r\n\r\n\r\nexport * from \"./types/data/DataInput\";\r\nexport * from \"./types/data/DataOutput\";\r\n\r\nexport type {FunctionCallContext} from \"./types/functions/FunctionCallContext\";\r\nexport * from \"./types/functions/PendingCall\";\r\n\r\nexport * from \"./types/RpcObject\";\r\nexport * from \"./types/RemoteFunction\";\r\nexport * from \"./types/RpcError\";\r\nexport {RpcProvider} from \"./types/RpcProviderDecorator\";\r\nexport {CustomDynamicType} from \"./types/data/CustomDynamicTypeDecorator\";\r\n\r\nimport(\"./rpc\").then((m)=>Object.assign(globalThis,m));\r\n\r\nexport class Rpc{\r\n\r\n\t//Rpc\r\n\tpublic static id:string=RpcId;\r\n\tpublic static get nameOrId():string{return RpcNameOrId;}\r\n\t\r\n\tpublic static setName(name:string){return setName(name);}\r\n\r\n\t//Connection\t\r\n\tpublic static get isConnected():boolean{return isConnected;}\r\n\tpublic static get waitUntilConnected():Promise<void>{return waitConnected();}\r\n\t\r\n\t//Functions\r\n\tpublic static createRemoteObject=createRpcObject;\r\n\tpublic static createRemoteFunction=createRemoteFunction;\r\n\tpublic static registerFunction=registerFunction;\r\n\tpublic static unregisterFunction=unregisterFunction;\r\n\t\r\n\tpublic static callLocal=callLocal;//Call function and get a PendingCall, this allows the use of the FunctionCallContext within the function\r\n\tpublic static callFunction=callFunction;//Call remote function\r\n\t\r\n\tpublic static getContext:()=>FunctionCallContext=getFunctionContext;\r\n\t\r\n\t\r\n\tpublic static registerType=registerType;\r\n\tpublic static unregisterType=unregisterType;\r\n\t\r\n\t\r\n\tpublic static checkTypes=async(...types:string[])=>await callFunction<number>(null,'?',...types);\r\n\tpublic static checkType=async(type:string)=>(await Rpc.checkTypes(type))!=0;\r\n\tpublic static getAllTypes=async()=>await callFunction<string[]>(null,'T');\r\n\tpublic static getAllConnections=async()=>await callFunction<string[]>(null,'C');\r\n\t\r\n\tpublic static objects=RPC_ROOT;\r\n}"],"names":["isNodeJs","RpcId","registeredFunctions","registeredTypes","registerType","type","invoker","isConnected","callFunction","e","unregisterType","PendingCall","resolve","reject","resolveCall","t","rejectCall","onrejected","onfinally","onfulfilled","args","func","registerReceive","getAsyncIterator","call","pending","requests","finished","request","requestResult","res","pendingMap","listenersMap","pendings","runReceiveMessage","currentContext","runWithContext","context","previous","getFunctionContext","nextId","method","local","callLocalFunction","already","buff","DataOutput","callId","PacketType","d","_webSocket","msgArgs","msg","list","sendRaw","sendCall","callLocal","controller","sending","received","promise","isRemoteFunction","createRemoteFunction","params","registerFunction","id","unregisterFunction","registered","RpcError","from","message","stackTrace","RpcObjectType","createRpcObject","target","cache","_","p","argArray","RPC_ROOT","prop","writeRegistry","readRegistry","readDynamic","data","objectId","o","key","registryEntry","pattern","flags","writeDynamic","output","buffer","element","check","write","idBytes","entries","value","size","additional","replacement","b","buf","n","c","s","array","i","u","arr","writeFunction","rf","error","remote","RpcNameOrId","activeRequests","currentlyExecuting","disposeConnection","ctx","ignoreUnhandledRejections","receiveRpc","rej","result","r","DataInput","pos","length","off","len","k","push","read","readFunction","resolveWaitUntilConnected","rejectWaitUntilConnected","waitUntilConnectedAttempt","waitConnected","createWebSocket","WebSocket","closeRpc","reconnect","webSocket","_name","setName","name","RpcProvider","CustomDynamicType","rpc","m","Rpc","types"],"mappings":"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"}